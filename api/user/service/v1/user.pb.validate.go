// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/service/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateUserInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NickName

	// no validation rules for Password

	// no validation rules for Mobile

	return nil
}

// CreateUserInfoValidationError is the validation error returned by
// CreateUserInfo.Validate if the designated constraints aren't met.
type CreateUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserInfoValidationError) ErrorName() string { return "CreateUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserInfoValidationError{}

// Validate checks the field values on PageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PageInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// PageInfoValidationError is the validation error returned by
// PageInfo.Validate if the designated constraints aren't met.
type PageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageInfoValidationError) ErrorName() string { return "PageInfoValidationError" }

// Error satisfies the builtin error interface
func (e PageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageInfoValidationError{}

// Validate checks the field values on UserInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Mobile

	// no validation rules for NickName

	// no validation rules for Birthday

	// no validation rules for Gender

	// no validation rules for Role

	return nil
}

// UserInfoResponseValidationError is the validation error returned by
// UserInfoResponse.Validate if the designated constraints aren't met.
type UserInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoResponseValidationError) ErrorName() string { return "UserInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoResponseValidationError{}

// Validate checks the field values on UserResponseList with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserResponseList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserResponseListValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserResponseListValidationError is the validation error returned by
// UserResponseList.Validate if the designated constraints aren't met.
type UserResponseListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserResponseListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserResponseListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserResponseListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserResponseListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserResponseListValidationError) ErrorName() string { return "UserResponseListValidationError" }

// Error satisfies the builtin error interface
func (e UserResponseListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserResponseList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserResponseListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserResponseListValidationError{}
